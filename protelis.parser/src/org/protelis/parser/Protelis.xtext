grammar org.protelis.parser.Protelis with org.eclipse.xtext.xbase.Xtype
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

generate protelis "http://protelis.org"

ProtelisModule: ('module' name=ProtelisQualifiedName)?
	(javaimports=ImportSection)?
	protelisImport+=Import*
	(definitions+=FunctionDef)* program=Block?
;

VarDefList: args += VarDef (',' args += VarDef)* ;

// RepList: args+=RepInitialize (',' args+=RepInitialize)*;
ExprList: args+=Expression (',' args+=Expression)*;
RepInitialize: x=VarDef '<-' w=Expression;
ShareInitialize: local=VarDef ',' field=VarDef '<-' w=Expression;

ImportSection:
	importDeclarations+=ImportDeclaration+;

ImportDeclaration: 
	'import'
		importedType=[jvmTypes::JvmType|QualifiedNameInStaticImport] (wildcard?='*' | memberName=AID)
;

Import: 
	'import' module=[ProtelisModule|ProtelisQualifiedName]
;

Block: (first=Statement) (';' others=Block)? ;

Statement: (Declaration | Assignment | Expression) ';'*;

Declaration returns VarDef:
	'let' VarDef '=' right=Expression
;

//LinkableStatement: Declaration | Expression;

Assignment:
	refVar=[VarDef] name='=' right = Expression
;

Expression:
 	LogicalOr
;

FunctionDef: public?="public"? 'def' name=ID '(' (args=VarDefList)? ')' '{' body=Block '}';


Call:
	/*
	 * Use manual scoping to solve this
	 */
	reference = [ecore::EObject|CallRule] '('args=ExprList?')'
;

Lambda:
	('(' (args=VarDefList)? ')' | args = VarDef) name='->' '{' body=Block '}';

Rep: 
	name='rep' '(' init=RepInitialize ')' '{' body=Block '}' 
;

Share: 
	name='share' '(' init=ShareInitialize ')' '{' body=Block '}' 
;

If:
	name='if' '(' cond=Expression ')' '{' then=Block '}' 'else' '{' else=Block '}'
;

NBR:
	name='nbr' '(' arg=Expression ')' 
;

Builtin:
	Self | Env | Pi | E | Eval | AlignedMap | Mux | Hood
;

Self: name = 'self';
Env: name = 'env';
Pi: name = 'pi';
E: name = 'e';
Eval: name='eval' '(' arg = ( VarUse | StringVal ) ')';
AlignedMap: name='alignedMap' '(' arg=Expression ',' cond=Expression ',' op=Expression ',' default=Expression ')';
Mux: name='mux' '(' cond=Expression ')' '{' then=Block '}' 'else' '{'  else=Block '}';

Hood:
	BuiltinHoodOp |	GenericHood  
;

GenericHood:
		(name = 'hood' | name = 'hoodPlusSelf') '('
			(reference = VarUse | op = Lambda ) ','
			default = Expression ','
			arg = Expression
		')'
;
	
BuiltinHoodOp:
	(
	name='minHood' |
	name='maxHood' |
	name='anyHood' |
	name='allHood' |
	name='sumHood' |
	name='meanHood' |
	name='unionHood'
) inclusive?='PlusSelf'? '(' arg=Expression ')'
;

LogicalOr returns Expression:
 LogicalAnd ({Expression.left=current} name='||' right=LogicalAnd)*;

LogicalAnd returns Expression:
 Equality ({Expression.left=current} name='&&' right=Equality)*;

Equality returns Expression:
 Relational ({Expression.left=current} name=('=='|'!=') right=Relational)*;

Relational returns Expression:
 Addition ({Expression.left=current} name=('>'|'>='|'<'|'<=') right=Addition)*;

Addition returns Expression:
 Multiplication ({Expression.left=current} name=('+'|'-') right=Multiplication)*;

Multiplication returns Expression:
 Power ({Expression.left=current} name=('*'|'/'|'%') right=Power)*;

Power returns Expression:
 Prefix ({Expression.left=current} name=('^') right=Prefix)*;

Prefix returns Expression:
    Postfix | ({Prefix} name=('-'|'!') right=Postfix);

Postfix returns Expression:
    Primary
    ({Expression.left=current}(name='.' methodName=AID '(' (args=ExprList)? ')'))*
;

Primary returns Expression:
 (v = (VarUse | Local | Call | Rep | Share | NBR | If) | '(' Expression ')')
;

Local: Scalar | Builtin | Lambda;

VarDef: name = ID;

VarUse: reference=[ecore::EObject|CallRuleNoConflict];

Scalar: DoubleVal | StringVal | BooleanVal | TupleVal;

DoubleVal: val=DOUBLE;

StringVal: val=STRING;

BooleanVal: val=BOOLEAN;

TupleVal: name='[' args = ExprList? ']';

CallRule: AID (JCallElement+ | ProtelisCallElement+)?;

CallRuleNoConflict: AID (JCallElement+ | ProtelisCallElement+) | ID;

JCallElement: '::' AID;

ProtelisCallElement: ':' ID;

ProtelisQualifiedName: ID (':' ID)* ;

AID: =>ID | 'random' | 'PlusSelf' | 'self' | 'env' | 'pi' | 'e';

@Override QualifiedNameInStaticImport:
  (AID '.')+
;

terminal INT returns ecore::EInt: ('0'..'9')+;
DOUBLE returns ecore::EDouble: INT('.'INT)?('e'|'E''-'?INT)? | 'Infinity' | 'NaN';
BOOLEAN returns ecore::EBoolean: "true" | "false";

